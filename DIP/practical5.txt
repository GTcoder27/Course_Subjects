% Read the image
img = imread('Peppers.png');  % replace 'image.jpg' with your image path
img_gray = rgb2gray(img);    % Convert to grayscale (if it's a color image)
imshow(img_gray);
title('Original Image');

% Convert the image to double precision for processing
img_double = double(img_gray);

% Compute the Fourier Transform of the image
F = fft2(img_double);
F_shifted = fftshift(F);  % Shift zero frequency to the center

% Create a frequency filter for smoothing (low-pass filter)
[rows, cols] = size(img_gray);
[u, v] = meshgrid(1:cols, 1:rows);
u = u - ceil(cols / 2);
v = v - ceil(rows / 2);
D = sqrt(u.^2 + v.^2);  % Distance matrix
cutoff = 50;  % Cutoff frequency for low-pass filter
H_smooth = double(D <= cutoff);  % Low-pass filter (Gaussian-like)

% Create a frequency filter for sharpening (high-pass filter)
H_sharp = 1 - H_smooth;  % High-pass filter (inverse of low-pass)

% Apply the low-pass (smoothing) filter in frequency domain
F_smooth = F_shifted .* H_smooth;
img_smooth = ifft2(ifftshift(F_smooth));  % Inverse FFT to get the filtered image

% Apply the high-pass (sharpening) filter in frequency domain
F_sharp = F_shifted .* H_sharp;
img_sharp = ifft2(ifftshift(F_sharp));  % Inverse FFT to get the filtered image

% Display the results
figure;
subplot(1, 3, 1);
imshow(img_gray, []);
title('Original Image');

subplot(1, 3, 2);
imshow(abs(img_smooth), []);  % Display the magnitude of the smooth image
title('Smoothed Image (Low-pass filter)');

subplot(1, 3, 3);
imshow(abs(img_sharp), []);  % Display the magnitude of the sharpened image
title('Sharpened Image (High-pass filter)');